{"ast":null,"code":"import sileo from \"sileo\";\nconst Tasks = new sileo.Model(\"task\", \"tasks\");\nconst CustomList = new sileo.Model(\"custom\", \"custom-list\");\nimport TaskCard from \"@/components/TaskCard.vue\";\nimport Loader from \"@/components/Loader.vue\";\nexport default {\n  name: \"HomeView\",\n  data() {\n    return {\n      tasks: [],\n      title: \"\",\n      description: \"\",\n      status: \"\",\n      due_date: \"\",\n      addTaskButton: false,\n      edit: false,\n      addTaskButtonCustom: false,\n      customList: null,\n      customListButton: true,\n      showListForm: false,\n      showList: false\n    };\n  },\n  props: {\n    listName: String,\n    nextStatus: String,\n    prevStatus: String,\n    custom: {\n      type: Boolean,\n      default: false\n    }\n  },\n  components: {\n    TaskCard,\n    Loader\n  },\n  async created() {\n    await this.getTasks();\n    await this.getCustomList();\n  },\n  methods: {\n    async getCustomList() {\n      await CustomList.objects.filter().then(res => {\n        this.customList = res[0].custom_list;\n        this.$emit(\"customListChange\", this.customList);\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    async removeList() {\n      try {\n        await CustomList.objects.update({\n          pk: 6\n        }, {\n          custom_list: \"\"\n        });\n        this.getCustomList();\n        window.location.reload(); //Need to have a force refresh to display real-time data.\n      } catch (error) {\n        console.error(\"Error updating task:\", error);\n      }\n    },\n    async handleAddList() {\n      // Making sure that customList field is filled.\n      if (this.customList) {\n        try {\n          await CustomList.objects.create({\n            custom_list: this.customList\n          });\n        } catch (error) {\n          console.error(\"Error updating task:\", error);\n        }\n      } else {\n        alert(\"Please fill in list title field.\");\n      }\n    },\n    async getTasks() {\n      await Tasks.objects.filter().then(res => {\n        this.tasks = res;\n      }).catch(e => {\n        console.log(e);\n      });\n    },\n    async addTask() {\n      // Making sure that the description, title, and date fields is filled.\n      if (this.description && this.title && this.due_date) {\n        try {\n          await Tasks.objects.create({\n            title: this.title,\n            description: this.description,\n            status: this.status,\n            due_date: this.due_date\n          });\n          await this.getTasks();\n          this.title = \"\";\n          this.description = \"\";\n          this.status = \"\";\n          this.due_date = \"\";\n        } catch (e) {\n          console.error(e);\n        }\n      } else {\n        alert(\"Please fill in title, description, and date fields before adding the task.\");\n      }\n    },\n    editTask(task) {\n      this.edit = true;\n      this.title = task.title;\n      this.description = task.description;\n      this.status = task.status;\n      this.due_date = task.due_date;\n      this.removeTask(task.pk);\n      this.addTaskButton = true;\n    },\n    async removeTask(taskId) {\n      try {\n        this.tasks = this.tasks.filter(task => task.pk !== taskId);\n        await Tasks.objects.delete({\n          pk: taskId\n        });\n      } catch (error) {\n        console.error(\"Error removing task:\", error);\n      }\n    },\n    // Change the task list by changing the status of the task.\n    async prevList(leftStatus, task) {\n      try {\n        if (task && task.pk) {\n          await Tasks.objects.update({\n            pk: task.pk\n          }, {\n            title: task.title,\n            description: task.description,\n            status: leftStatus,\n            due_date: task.due_date\n          });\n          window.location.reload(); //Need to have a force refresh to display real-time data.\n          await this.getTasks();\n        }\n      } catch (error) {\n        console.error(\"Error updating task:\", error);\n      }\n    },\n    // Change the task list by changing the status of the task.\n    async nextList(rightStatus, task) {\n      try {\n        if (task && task.pk) {\n          await Tasks.objects.update({\n            pk: task.pk\n          }, {\n            title: task.title,\n            description: task.description,\n            status: rightStatus,\n            due_date: task.due_date\n          });\n          window.location.reload(); //Need to have a force refresh to display real-time data.\n          await this.getTasks();\n        }\n      } catch (error) {\n        console.error(\"Error updating task:\", error);\n      }\n    },\n    handleCancel() {\n      this.addTaskButton = !this.addTaskButton;\n\n      //Add a setTimeout so that the this.edit will not directly be false when trying to cancel edit.\n      setTimeout(() => {\n        this.edit = false;\n      }, 1000);\n    }\n  }\n};","map":{"version":3,"names":["sileo","Tasks","Model","CustomList","TaskCard","Loader","name","data","tasks","title","description","status","due_date","addTaskButton","edit","addTaskButtonCustom","customList","customListButton","showListForm","showList","props","listName","String","nextStatus","prevStatus","custom","type","Boolean","default","components","created","getTasks","getCustomList","methods","objects","filter","then","res","custom_list","$emit","catch","e","console","log","removeList","update","pk","window","location","reload","error","handleAddList","create","alert","addTask","editTask","task","removeTask","taskId","delete","prevList","leftStatus","nextList","rightStatus","handleCancel","setTimeout"],"sources":["src/components/CardList.vue"],"sourcesContent":["<template>\n  <div>\n     <!-- Added a separate code here for the custom list since I still want to use the component for adding custom list in my HomeView -->\n    <div v-if=\"custom\" class=\"list\">\n      <p\n        class=\"custom-list-button\"\n        v-show=\"\n          !tasks.find((task) => task.status === 'custom') &&\n          customListButton &&\n          customList === null\n        \"\n        @click=\"(customListButton = false), (showListForm = !showListForm)\"\n      >\n        + Add a Customized List\n      </p>\n      <div\n        class=\"task-card\"\n        style=\"margin: 0; border: none\"\n        v-show=\"showListForm\"\n      >\n        <div class=\"task\">\n          <form v-on:submit.prevent=\"handleAddList\">\n            <textarea\n              class=\"task-title\"\n              v-model=\"customList\"\n              type=\"text\"\n              placeholder=\"Title...\"\n            ></textarea>\n            <div class=\"button-container\">\n              <button\n                class=\"add-task-button\"\n                type=\"submit\"\n                :disabled=\"this.customList ? false : true\"\n                @click=\"(showList = !showList), (showListForm = !showListForm)\"\n              >\n                Add list\n              </button>\n              <button\n                @click=\"\n                  (customListButton = !customListButton),\n                    (showListForm = !showListForm)\n                \"\n                type=\"button\"\n                class=\"cancel-button\"\n              >\n                Cancel\n              </button>\n            </div>\n          </form>\n        </div>\n      </div>\n      <div v-show=\"customList !== null\">\n        <div class=\"list-card\">\n          <h1>{{ customList ? customList.toUpperCase() : customList }}</h1>\n          <div class=\"display-list\">\n            <div v-for=\"task in tasks\" :key=\"task.pk\">\n              <TaskCard\n                v-show=\"task.status === 'custom'\"\n                :task=\"task\"\n                prevStatus=\"done\"\n                @remove-task=\"removeTask(task.pk)\"\n                @edit-task=\"editTask\"\n                @prev-list=\"prevList\"\n              />\n            </div>\n            <div class=\"task-card\" v-show=\"addTaskButtonCustom\">\n              <div class=\"task\">\n                <form v-on:submit.prevent=\"addTask\">\n                  <textarea\n                    class=\"task-title\"\n                    v-model=\"title\"\n                    type=\"text\"\n                    placeholder=\"Title...\"\n                  ></textarea>\n                  <textarea\n                    class=\"task-description\"\n                    v-model=\"description\"\n                    type=\"text\"\n                    placeholder=\"Description...\"\n                  ></textarea>\n                  <input\n                    class=\"task-date\"\n                    type=\"date\"\n                    v-model=\"due_date\"\n                    placeholder=\"Date...\"\n                  />\n                  <div class=\"button-container\">\n                    <button\n                      class=\"add-task-button\"\n                      type=\"submit\"\n                      @click=\"status = 'custom'\"\n                    >\n                      Add card\n                    </button>\n                    <button\n                      @click=\"addTaskButtonCustom = !addTaskButtonCustom\"\n                      type=\"button\"\n                      class=\"cancel-button\"\n                    >\n                      Cancel\n                    </button>\n                  </div>\n                </form>\n              </div>\n            </div>\n            <div\n              class=\"remove-container\"\n              @click=\"removeList\"\n              v-show=\"!tasks.find((task) => task.status === 'custom')\"\n            >\n              <div class=\"remove\">\n                <div class=\"remove-list-button\">\n                  <i class=\"fas fa-trash trash-button\"></i>\n                </div>\n                <p>Remove this list</p>\n              </div>\n            </div>\n            <p\n              class=\"add-button\"\n              @click=\"addTaskButtonCustom = !addTaskButtonCustom\"\n            >\n              + Create new card\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n    <div v-else class=\"list\">\n      <div class=\"list-card\">\n        <h1>{{ listName.toUpperCase() }}</h1>\n        <div class=\"display-list\">\n          <div v-for=\"task in tasks\" :key=\"task.pk\">\n            <TaskCard\n              v-show=\"task.status === listName\"\n              :task=\"task\"\n              :nextStatus=\"nextStatus\"\n              :prevStatus=\"prevStatus\"\n              @edit-task=\"editTask\"\n              @remove-task=\"removeTask(task.pk)\"\n              @next-list=\"nextList\"\n              @prev-list=\"prevList\"\n            />\n          </div>\n          <div class=\"task-card\" v-show=\"addTaskButton\">\n            <div class=\"task\">\n              <form v-on:submit.prevent=\"addTask\">\n                <textarea\n                  class=\"task-title\"\n                  v-model=\"title\"\n                  type=\"text\"\n                  placeholder=\"Title...\"\n                ></textarea>\n                <textarea\n                  class=\"task-description\"\n                  v-model=\"description\"\n                  type=\"text\"\n                  placeholder=\"Description...\"\n                ></textarea>\n                <input\n                  class=\"task-date\"\n                  type=\"date\"\n                  v-model=\"due_date\"\n                  placeholder=\"Date...\"\n                />\n                <div class=\"button-container\">\n                  <button\n                    class=\"add-task-button\"\n                    type=\"submit\"\n                    @click=\"(status = listName), (edit = false)\"\n                  >\n                    Add card\n                  </button>\n                  <button\n                    :type=\"edit === true ? 'submit' : 'button'\"\n                    @click=\"handleCancel\"\n                    class=\"cancel-button\"\n                  >\n                    Cancel\n                  </button>\n                </div>\n              </form>\n            </div>\n          </div>\n          <p class=\"add-button\" @click=\"addTaskButton = !addTaskButton\">\n            + Create new card\n          </p>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport sileo from \"sileo\";\n\nconst Tasks = new sileo.Model(\"task\", \"tasks\");\nconst CustomList = new sileo.Model(\"custom\", \"custom-list\");\n\nimport TaskCard from \"@/components/TaskCard.vue\";\nimport Loader from \"@/components/Loader.vue\";\n\nexport default {\n  name: \"HomeView\",\n  data() {\n    return {\n      tasks: [],\n      title: \"\",\n      description: \"\",\n      status: \"\",\n      due_date: \"\",\n      addTaskButton: false,\n      edit: false,\n      addTaskButtonCustom: false,\n      customList: null,\n      customListButton: true,\n      showListForm: false,\n      showList: false,\n    };\n  },\n  props: {\n    listName: String,\n    nextStatus: String,\n    prevStatus: String,\n    custom: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  components: {\n    TaskCard,\n    Loader,\n  },\n  async created() {\n    await this.getTasks();\n    await this.getCustomList();\n  },\n  methods: {\n    async getCustomList() {\n      await CustomList.objects\n        .filter()\n        .then((res) => {\n          this.customList = res[0].custom_list;\n          this.$emit(\"customListChange\", this.customList);\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    },\n    async removeList() {\n      try {\n        await CustomList.objects.update(\n          { pk: 6 },\n          {\n            custom_list: \"\",\n          }\n        );\n        this.getCustomList();\n        window.location.reload(); //Need to have a force refresh to display real-time data.\n      } catch (error) {\n        console.error(\"Error updating task:\", error);\n      }\n    },\n    async handleAddList() {\n      // Making sure that customList field is filled.\n      if (this.customList) {\n        try {\n          await CustomList.objects.create(\n            {\n              custom_list: this.customList,\n            }\n          );\n        } catch (error) {\n          console.error(\"Error updating task:\", error);\n        }\n      } else {\n        alert(\"Please fill in list title field.\");\n      }\n    },\n    async getTasks() {\n      await Tasks.objects\n        .filter()\n        .then((res) => {\n          this.tasks = res;\n        })\n        .catch((e) => {\n          console.log(e);\n        });\n    },\n    async addTask() {\n      // Making sure that the description, title, and date fields is filled.\n      if (this.description && this.title && this.due_date) {\n        try {\n          await Tasks.objects.create({\n            title: this.title,\n            description: this.description,\n            status: this.status,\n            due_date: this.due_date,\n          });\n          await this.getTasks();\n          this.title = \"\";\n          this.description = \"\";\n          this.status = \"\";\n          this.due_date = \"\";\n        } catch (e) {\n          console.error(e);\n        }\n      } else {\n        alert(\n          \"Please fill in title, description, and date fields before adding the task.\"\n        );\n      }\n    },\n    editTask(task) {\n      this.edit = true;\n      this.title = task.title;\n      this.description = task.description;\n      this.status = task.status;\n      this.due_date = task.due_date;\n\n      this.removeTask(task.pk);\n\n      this.addTaskButton = true;\n    },\n\n    async removeTask(taskId) {\n      try {\n        this.tasks = this.tasks.filter((task) => task.pk !== taskId);\n        await Tasks.objects.delete({ pk: taskId });\n      } catch (error) {\n        console.error(\"Error removing task:\", error);\n      }\n    },\n\n    // Change the task list by changing the status of the task.\n    async prevList(leftStatus, task) {\n      try {\n        if (task && task.pk) {\n          await Tasks.objects.update(\n            { pk: task.pk },\n            {\n              title: task.title,\n              description: task.description,\n              status: leftStatus,\n              due_date: task.due_date,\n            }\n          );\n          window.location.reload(); //Need to have a force refresh to display real-time data.\n          await this.getTasks();\n        }\n      } catch (error) {\n        console.error(\"Error updating task:\", error);\n      }\n    },\n\n    // Change the task list by changing the status of the task.\n    async nextList(rightStatus, task) {\n      try {\n        if (task && task.pk) {\n          await Tasks.objects.update(\n            { pk: task.pk },\n            {\n              title: task.title,\n              description: task.description,\n              status: rightStatus,\n              due_date: task.due_date,\n            }\n          );\n          window.location.reload(); //Need to have a force refresh to display real-time data.\n          await this.getTasks();\n        }\n      } catch (error) {\n        console.error(\"Error updating task:\", error);\n      }\n    },\n    handleCancel() {\n      this.addTaskButton = !this.addTaskButton;\n\n      //Add a setTimeout so that the this.edit will not directly be false when trying to cancel edit.\n      setTimeout(() => {\n        this.edit = false;\n      }, 1000);\n    },\n  },\n};\n</script>\n\n<style scoped lang=\"scss\">\n@import \"./CardList.scss\";\n</style>"],"mappings":"AAiMA,OAAAA,KAAA;AAEA,MAAAC,KAAA,OAAAD,KAAA,CAAAE,KAAA;AACA,MAAAC,UAAA,OAAAH,KAAA,CAAAE,KAAA;AAEA,OAAAE,QAAA;AACA,OAAAC,MAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,KAAA;MACAC,KAAA;MACAC,WAAA;MACAC,MAAA;MACAC,QAAA;MACAC,aAAA;MACAC,IAAA;MACAC,mBAAA;MACAC,UAAA;MACAC,gBAAA;MACAC,YAAA;MACAC,QAAA;IACA;EACA;EACAC,KAAA;IACAC,QAAA,EAAAC,MAAA;IACAC,UAAA,EAAAD,MAAA;IACAE,UAAA,EAAAF,MAAA;IACAG,MAAA;MACAC,IAAA,EAAAC,OAAA;MACAC,OAAA;IACA;EACA;EACAC,UAAA;IACAzB,QAAA;IACAC;EACA;EACA,MAAAyB,QAAA;IACA,WAAAC,QAAA;IACA,WAAAC,aAAA;EACA;EACAC,OAAA;IACA,MAAAD,cAAA;MACA,MAAA7B,UAAA,CAAA+B,OAAA,CACAC,MAAA,GACAC,IAAA,CAAAC,GAAA;QACA,KAAArB,UAAA,GAAAqB,GAAA,IAAAC,WAAA;QACA,KAAAC,KAAA,0BAAAvB,UAAA;MACA,GACAwB,KAAA,CAAAC,CAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,CAAA;MACA;IACA;IACA,MAAAG,WAAA;MACA;QACA,MAAAzC,UAAA,CAAA+B,OAAA,CAAAW,MAAA,CACA;UAAAC,EAAA;QAAA,GACA;UACAR,WAAA;QACA,CACA;QACA,KAAAN,aAAA;QACAe,MAAA,CAAAC,QAAA,CAAAC,MAAA;MACA,SAAAC,KAAA;QACAR,OAAA,CAAAQ,KAAA,yBAAAA,KAAA;MACA;IACA;IACA,MAAAC,cAAA;MACA;MACA,SAAAnC,UAAA;QACA;UACA,MAAAb,UAAA,CAAA+B,OAAA,CAAAkB,MAAA,CACA;YACAd,WAAA,OAAAtB;UACA,CACA;QACA,SAAAkC,KAAA;UACAR,OAAA,CAAAQ,KAAA,yBAAAA,KAAA;QACA;MACA;QACAG,KAAA;MACA;IACA;IACA,MAAAtB,SAAA;MACA,MAAA9B,KAAA,CAAAiC,OAAA,CACAC,MAAA,GACAC,IAAA,CAAAC,GAAA;QACA,KAAA7B,KAAA,GAAA6B,GAAA;MACA,GACAG,KAAA,CAAAC,CAAA;QACAC,OAAA,CAAAC,GAAA,CAAAF,CAAA;MACA;IACA;IACA,MAAAa,QAAA;MACA;MACA,SAAA5C,WAAA,SAAAD,KAAA,SAAAG,QAAA;QACA;UACA,MAAAX,KAAA,CAAAiC,OAAA,CAAAkB,MAAA;YACA3C,KAAA,OAAAA,KAAA;YACAC,WAAA,OAAAA,WAAA;YACAC,MAAA,OAAAA,MAAA;YACAC,QAAA,OAAAA;UACA;UACA,WAAAmB,QAAA;UACA,KAAAtB,KAAA;UACA,KAAAC,WAAA;UACA,KAAAC,MAAA;UACA,KAAAC,QAAA;QACA,SAAA6B,CAAA;UACAC,OAAA,CAAAQ,KAAA,CAAAT,CAAA;QACA;MACA;QACAY,KAAA,CACA,4EACA;MACA;IACA;IACAE,SAAAC,IAAA;MACA,KAAA1C,IAAA;MACA,KAAAL,KAAA,GAAA+C,IAAA,CAAA/C,KAAA;MACA,KAAAC,WAAA,GAAA8C,IAAA,CAAA9C,WAAA;MACA,KAAAC,MAAA,GAAA6C,IAAA,CAAA7C,MAAA;MACA,KAAAC,QAAA,GAAA4C,IAAA,CAAA5C,QAAA;MAEA,KAAA6C,UAAA,CAAAD,IAAA,CAAAV,EAAA;MAEA,KAAAjC,aAAA;IACA;IAEA,MAAA4C,WAAAC,MAAA;MACA;QACA,KAAAlD,KAAA,QAAAA,KAAA,CAAA2B,MAAA,CAAAqB,IAAA,IAAAA,IAAA,CAAAV,EAAA,KAAAY,MAAA;QACA,MAAAzD,KAAA,CAAAiC,OAAA,CAAAyB,MAAA;UAAAb,EAAA,EAAAY;QAAA;MACA,SAAAR,KAAA;QACAR,OAAA,CAAAQ,KAAA,yBAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAU,SAAAC,UAAA,EAAAL,IAAA;MACA;QACA,IAAAA,IAAA,IAAAA,IAAA,CAAAV,EAAA;UACA,MAAA7C,KAAA,CAAAiC,OAAA,CAAAW,MAAA,CACA;YAAAC,EAAA,EAAAU,IAAA,CAAAV;UAAA,GACA;YACArC,KAAA,EAAA+C,IAAA,CAAA/C,KAAA;YACAC,WAAA,EAAA8C,IAAA,CAAA9C,WAAA;YACAC,MAAA,EAAAkD,UAAA;YACAjD,QAAA,EAAA4C,IAAA,CAAA5C;UACA,CACA;UACAmC,MAAA,CAAAC,QAAA,CAAAC,MAAA;UACA,WAAAlB,QAAA;QACA;MACA,SAAAmB,KAAA;QACAR,OAAA,CAAAQ,KAAA,yBAAAA,KAAA;MACA;IACA;IAEA;IACA,MAAAY,SAAAC,WAAA,EAAAP,IAAA;MACA;QACA,IAAAA,IAAA,IAAAA,IAAA,CAAAV,EAAA;UACA,MAAA7C,KAAA,CAAAiC,OAAA,CAAAW,MAAA,CACA;YAAAC,EAAA,EAAAU,IAAA,CAAAV;UAAA,GACA;YACArC,KAAA,EAAA+C,IAAA,CAAA/C,KAAA;YACAC,WAAA,EAAA8C,IAAA,CAAA9C,WAAA;YACAC,MAAA,EAAAoD,WAAA;YACAnD,QAAA,EAAA4C,IAAA,CAAA5C;UACA,CACA;UACAmC,MAAA,CAAAC,QAAA,CAAAC,MAAA;UACA,WAAAlB,QAAA;QACA;MACA,SAAAmB,KAAA;QACAR,OAAA,CAAAQ,KAAA,yBAAAA,KAAA;MACA;IACA;IACAc,aAAA;MACA,KAAAnD,aAAA,SAAAA,aAAA;;MAEA;MACAoD,UAAA;QACA,KAAAnD,IAAA;MACA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}